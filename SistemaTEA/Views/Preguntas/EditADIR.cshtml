@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Preguntas ADI-R</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

            .header h1 {
                color: #2c3e50;
                font-size: 2.5rem;
                margin-bottom: 10px;
                font-weight: 700;
            }

            .header p {
                color: #7f8c8d;
                font-size: 1.1rem;
            }

        .actions-bar {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .filters-section {
            display: flex;
            gap: 15px;
            flex: 1;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-box {
            position: relative;
            min-width: 300px;
            flex: 1;
        }

            .search-box input {
                width: 100%;
                padding: 12px 20px 12px 50px;
                border: 2px solid #e0e6ed;
                border-radius: 50px;
                font-size: 1rem;
                transition: all 0.3s ease;
                background: white;
            }

                .search-box input:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                }

            .search-box i {
                position: absolute;
                left: 18px;
                top: 50%;
                transform: translateY(-50%);
                color: #95a5a6;
            }

        .filter-select {
            padding: 12px 20px;
            border: 2px solid #e0e6ed;
            border-radius: 50px;
            font-size: 1rem;
            background: white;
            min-width: 180px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .filter-select:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            }

        .btn-success {
            background: linear-gradient(45deg, #56ab2f, #a8e6cf);
            color: white;
            box-shadow: 0 4px 15px rgba(86, 171, 47, 0.3);
        }

            .btn-success:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(86, 171, 47, 0.4);
            }

        .questions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
            gap: 25px;
        }

        .question-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

            .question-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .question-number {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.1rem;
        }

        .area-badge {
            background: linear-gradient(45deg, #f39c12, #f1c40f);
            color: white;
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .question-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 0.9rem;
            color: #7f8c8d;
        }

        .question-type {
            background: #ecf0f1;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
        }

        .question-text {
            font-size: 1.1rem;
            color: #2c3e50;
            line-height: 1.6;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .question-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }

        .btn-small {
            padding: 8px 16px;
            font-size: 0.9rem;
            border-radius: 25px;
        }

        .btn-edit {
            background: linear-gradient(45deg, #f39c12, #f1c40f);
            color: white;
            box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
        }

            .btn-edit:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(243, 156, 18, 0.4);
            }

        .btn-delete {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }

            .btn-delete:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
            }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 3% auto;
            padding: 30px;
            border-radius: 20px;
            width: 90%;
            max-width: 700px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
            position: relative;
            max-height: 90vh;
            overflow-y: auto;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 28px;
            font-weight: bold;
            color: #aaa;
            cursor: pointer;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

            .close:hover {
                background: #f1f2f6;
                color: #2c3e50;
            }

        .form-group {
            margin-bottom: 20px;
        }

            .form-group label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #2c3e50;
            }

            .form-group textarea,
            .form-group select,
            .form-group input {
                width: 100%;
                padding: 15px;
                border: 2px solid #e0e6ed;
                border-radius: 10px;
                font-size: 1rem;
                font-family: inherit;
                transition: all 0.3s ease;
            }

            .form-group textarea {
                resize: vertical;
                min-height: 120px;
            }

                .form-group textarea:focus,
                .form-group select:focus,
                .form-group input:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                }

        .modal-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 25px;
        }

        .stats {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .stats-item {
            display: inline-block;
            margin: 0 20px;
            color: #2c3e50;
        }

        .stats-number {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
        }

        .no-questions {
            text-align: center;
            padding: 60px 20px;
            color: #7f8c8d;
            font-size: 1.2rem;
        }

        @@media (max-width: 768px) {
            .questions-grid

        {
            grid-template-columns: 1fr;
        }

        .actions-bar {
            flex-direction: column;
            align-items: stretch;
        }

        .filters-section {
            flex-direction: column;
            align-items: stretch;
        }

        .search-box {
            min-width: 100%;
        }

        .header h1 {
            font-size: 2rem;
        }

        .question-header {
            flex-direction: column;
            gap: 10px;
            align-items: flex-start;
        }

        }
    </style>
</head>
<body>
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-comments"></i> Editor de Preguntas ADI-R</h1>
            <p>Gestiona y edita las preguntas del cuestionario ADI-R organizadas por áreas</p>
        </div>

        <div class="stats">
            <div class="stats-item">
                <div class="stats-number" id="totalQuestions">@Model.Count</div>
                <div>Total de Preguntas</div>
            </div>
            <div class="stats-item">
                <div class="stats-number" id="filteredQuestions">@Model.Count</div>
                <div>Mostrando</div>
            </div>
            <div class="stats-item">
                <div class="stats-number" id="totalAreas">
                    @{
                        var areas = new List<int>();
                        foreach (var item in Model)
                        {
                            if (!areas.Contains(item.AreaID))
                            {
                                areas.Add(item.AreaID);
                            }
                        }
                    }
                    @areas.Count
                </div>
                <div>Áreas</div>
            </div>
        </div>

        <div class="actions-bar">
            <div class="filters-section">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" id="searchInput" placeholder="Buscar preguntas...">
                </div>
                <select id="areaFilter" class="filter-select">
                    <option value="">Todas las áreas</option>
                    @{
                        var areasDistintas = new Dictionary<int, string>();
                        foreach (var item in Model)
                        {
                            if (!areasDistintas.ContainsKey(item.AreaID))
                            {
                                areasDistintas.Add(item.AreaID, item.NombreArea);
                            }
                        }
                    }
                    @foreach (var area in areasDistintas)
                    {
                        <option value="@area.Key">@area.Value</option>
                    }
                </select>
            </div>
            <a href="/Preguntas/CreateADIR" class="btn btn-primary">
                <i class="fas fa-plus"></i> Nueva Pregunta
            </a>
        </div>

        <div class="questions-grid" id="questionsGrid">
            @if (Model != null && Model.Any())
            {
                @foreach (var item in Model)
                {
                    <div class="question-card" data-area-id="@item.AreaID" data-question-text="@item.TextoPregunta.ToLower()">
                        <div class="question-header">
                            <div class="question-number">@item.NumeroPregunta</div>
                            <div class="area-badge">@item.NombreArea</div>
                        </div>
                        <div class="question-meta">
                            <span>Pregunta #@item.PreguntaID</span>
                            @if (!string.IsNullOrEmpty(item.TipoPregunta))
                            {
                                <span class="question-type">@item.TipoPregunta</span>
                            }
                        </div>
                        <div class="question-text">@item.TextoPregunta</div>
                        <div class="question-actions">
                            <button class="btn btn-edit btn-small" onclick="openModal(@item.PreguntaID)">
                                <i class="fas fa-edit"></i> Editar
                            </button>
                            <a href="/Preguntas/DeleteADIR/@item.PreguntaID" class="btn btn-delete btn-small">
                                <i class="fas fa-trash"></i> Eliminar
                            </a>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-questions">
                    <i class="fas fa-inbox" style="font-size: 4rem; color: #bdc3c7; margin-bottom: 20px;"></i>
                    <p>No hay preguntas disponibles</p>
                </div>
            }
        </div>
    </div>

    <div id="questionModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2 id="modalTitle">Editar Pregunta ADI-R</h2>
            <form id="editForm" method="post" asp-action="EditADIR" asp-controller="Preguntas">
                @Html.AntiForgeryToken()
                <input type="hidden" id="questionId" name="PreguntaID" />

                <div class="form-group">
                    <label for="areaSelect">Área:</label>
                    <select id="areaSelect" name="AreaID" required>
                        <option value="">Seleccione un área</option>
                        @{
                            var areasModal = new Dictionary<int, string>();
                            foreach (var item in Model)
                            {
                                if (!areasModal.ContainsKey(item.AreaID))
                                {
                                    areasModal.Add(item.AreaID, item.NombreArea);
                                }
                            }
                        }
                        @foreach (var area in areasModal)
                        {
                            <option value="@area.Key">@area.Value</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="questionText">Texto de la Pregunta:</label>
                    <textarea id="questionText" name="TextoPregunta" rows="5" placeholder="Escribe aquí el texto de la pregunta..." required></textarea>
                </div>

                <div class="form-group">
                    <label for="questionType">Tipo de Pregunta:</label>
                    <input type="text" id="questionType" name="TipoPregunta" placeholder="Ej: Observación, Interacción, etc.">
                </div>

                <div class="modal-actions">
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save"></i> Guardar Cambios
                    </button>
                    <button type="button" class="btn" onclick="closeModal()" style="background: #95a5a6; color: white;">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        const questions = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        let filteredQuestions = questions;

        function openModal(id) {
            const question = questions.find(q => q.PreguntaID === id);
            if (!question) return;

            document.getElementById('questionId').value = question.PreguntaID;
            document.getElementById('questionText').value = question.TextoPregunta;
            document.getElementById('questionType').value = question.TipoPregunta || '';
            document.getElementById('areaSelect').value = question.AreaID;

            document.getElementById('modalTitle').textContent = `Editar Pregunta #${question.NumeroPregunta} - ${question.NombreArea}`;
            document.getElementById('questionModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('questionModal').style.display = 'none';
        }

        function filterQuestions() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const selectedArea = document.getElementById('areaFilter').value;

            const cards = document.querySelectorAll('.question-card');
            let visibleCount = 0;

            cards.forEach(card => {
                const questionText = card.getAttribute('data-question-text');
                const areaId = card.getAttribute('data-area-id');

                const matchesSearch = questionText.includes(searchTerm);
                const matchesArea = !selectedArea || areaId === selectedArea;

                if (matchesSearch && matchesArea) {
                    card.style.display = 'block';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });

            document.getElementById('filteredQuestions').textContent = visibleCount;
        }

        document.getElementById('searchInput').addEventListener('input', filterQuestions);
        document.getElementById('areaFilter').addEventListener('change', filterQuestions);

        window.onclick = function (event) {
            const modal = document.getElementById('questionModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Inicializar estadísticas
        document.addEventListener('DOMContentLoaded', function() {
            filterQuestions();
        });
    </script>
</body>
</html>