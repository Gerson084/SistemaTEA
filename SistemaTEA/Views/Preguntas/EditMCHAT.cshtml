@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Preguntas MCHAT</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

            .header h1 {
                color: #2c3e50;
                font-size: 2.5rem;
                margin-bottom: 10px;
                font-weight: 700;
            }

            .header p {
                color: #7f8c8d;
                font-size: 1.1rem;
            }

        .actions-bar {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .search-box {
            position: relative;
            flex: 1;
            min-width: 300px;
        }

            .search-box input {
                width: 100%;
                padding: 12px 20px 12px 50px;
                border: 2px solid #e0e6ed;
                border-radius: 50px;
                font-size: 1rem;
                transition: all 0.3s ease;
                background: white;
            }

                .search-box input:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                }

            .search-box i {
                position: absolute;
                left: 18px;
                top: 50%;
                transform: translateY(-50%);
                color: #95a5a6;
            }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            }

        .btn-success {
            background: linear-gradient(45deg, #56ab2f, #a8e6cf);
            color: white;
            box-shadow: 0 4px 15px rgba(86, 171, 47, 0.3);
        }

            .btn-success:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(86, 171, 47, 0.4);
            }

        .questions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 25px;
        }

        .question-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

            .question-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            }

        .question-number {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 15px;
        }

        .question-text {
            font-size: 1.1rem;
            color: #2c3e50;
            line-height: 1.6;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .question-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }

        .btn-small {
            padding: 8px 16px;
            font-size: 0.9rem;
            border-radius: 25px;
        }

        .btn-edit {
            background: linear-gradient(45deg, #f39c12, #f1c40f);
            color: white;
            box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
        }

            .btn-edit:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(243, 156, 18, 0.4);
            }

        .btn-delete {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }

            .btn-delete:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
            }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 20px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
            position: relative;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 28px;
            font-weight: bold;
            color: #aaa;
            cursor: pointer;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

            .close:hover {
                background: #f1f2f6;
                color: #2c3e50;
            }

        .form-group {
            margin-bottom: 20px;
        }

            .form-group label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #2c3e50;
            }

            .form-group textarea {
                width: 100%;
                padding: 15px;
                border: 2px solid #e0e6ed;
                border-radius: 10px;
                font-size: 1rem;
                resize: vertical;
                min-height: 120px;
                font-family: inherit;
            }

                .form-group textarea:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                }

        .modal-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 25px;
        }

        .stats {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .stats-item {
            display: inline-block;
            margin: 0 20px;
            color: #2c3e50;
        }

        .stats-number {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
        }

        @@media (max-width: 768px) {
            .questions-grid

        {
            grid-template-columns: 1fr;
        }

        .actions-bar {
            flex-direction: column;
            align-items: stretch;
        }

        .search-box {
            min-width: 100%;
        }

        .header h1 {
            font-size: 2rem;
        }

        }
    </style>
</head>
<body>
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-brain"></i> Editor de Preguntas MCHAT</h1>
            <p>Gestiona y edita las preguntas del cuestionario MCHAT de forma sencilla</p>
        </div>

        <div class="stats">
            <div class="stats-item">
                <div class="stats-number" id="totalQuestions">23</div>
                <div>Total de Preguntas</div>
            </div>
            <div class="stats-item">
                <div class="stats-number" id="filteredQuestions">23</div>
                <div>Mostrando</div>
            </div>
        </div>

        <div class="actions-bar">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Buscar preguntas...">
            </div>
            <button class="btn btn-primary" onclick="openAddModal()">
                <i class="fas fa-plus"></i> Nueva Pregunta
            </button>
            <button class="btn btn-success" onclick="saveAll()">
                <i class="fas fa-save"></i> Guardar Cambios
            </button>
        </div>

        <div class="questions-grid" id="questionsGrid">
            @foreach (var item in Model)
            {
                <div class="question-card">
                  <div class="question-number">@item.PreguntaID</div>
                  <div class="question-text">@item.TextoPregunta</div>
                  <div class="question-actions">
                        <button class="btn btn-edit btn-small" onclick="editQuestion(@item.PreguntaID, '@Html.Raw(Html.Encode(item.TextoPregunta).Replace("'", "\\'").Replace("\r\n", "\\n").Replace("\n", "\\n"))')">
                            <i class="fas fa-edit"></i> Editar
                        </button>

                  </div>
                </div>
            }
        </div>
    </div>


    <div id="questionModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2 id="modalTitle">Editar Pregunta</h2>
            <form asp-action="EditMCHAT" asp-controller="Preguntas">
                <div class="form-group">
                    <label for="questionText">Texto de la Pregunta:</label>
                    <textarea id="questionText" placeholder="Escribe aquí el texto de la pregunta..."></textarea>
                </div>
                <div class="modal-actions">
                    <button type="submit" class="btn btn-primary" onclick="saveQuestion()">
                        <i class="fas fa-save"></i> Guardar
                    </button>
                    <button type="button" class="btn" onclick="closeModal()" style="background: #95a5a6; color: white;">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Cargar preguntas desde el modelo Razor
        let questions = [
        @foreach (var item in Model)
        {
            <text>{ id: @item.PreguntaID, text: '@Html.Raw(Html.Encode(item.TextoPregunta).Replace("'", "\\'").Replace("\r\n", "\\n").Replace("\n", "\\n"))' },</text>
        }
        ];

        let originalQuestions = [...questions]; // Copia para comparar cambios
        let currentEditingId = null;

        function updateStats(filteredCount = null) {
            const totalCount = questions.length;
            const displayCount = filteredCount !== null ? filteredCount : totalCount;
            document.getElementById('totalQuestions').textContent = totalCount;
            document.getElementById('filteredQuestions').textContent = displayCount;
        }

        function editQuestion(id, currentText = null) {
            // Si no se pasa el texto, buscarlo en el array
            if (currentText === null) {
                const question = questions.find(q => q.id === id);
                currentText = question ? question.text : '';
            }

            currentEditingId = id;
            document.getElementById('modalTitle').textContent = 'Editar Pregunta';
            document.getElementById('questionText').value = currentText;
            document.getElementById('questionModal').style.display = 'block';
        }

        function openAddModal() {
            currentEditingId = null;
            document.getElementById('modalTitle').textContent = 'Nueva Pregunta';
            document.getElementById('questionText').value = '';
            document.getElementById('questionModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('questionModal').style.display = 'none';
        }

        function saveQuestion() {
            const text = document.getElementById('questionText').value.trim();
            if (!text) {
                alert('Por favor, ingresa el texto de la pregunta.');
                return;
            }

            if (currentEditingId) {
                // Editar pregunta existente
                const question = questions.find(q => q.id === currentEditingId);
                if (question) {
                    question.text = text;
                    // Actualizar la tarjeta en el DOM
                    updateQuestionCard(currentEditingId, text);
                }
            } else {
                // Agregar nueva pregunta
                const newId = Math.max(...questions.map(q => q.id)) + 1;
                const newQuestion = { id: newId, text: text };
                questions.push(newQuestion);
                addQuestionCard(newQuestion);
            }

            updateStats();
            closeModal();
        }

        function updateQuestionCard(id, newText) {
            const cards = document.querySelectorAll('.question-card');
            cards.forEach(card => {
                const numberDiv = card.querySelector('.question-number');
                if (numberDiv && parseInt(numberDiv.textContent) === id) {
                    const textDiv = card.querySelector('.question-text');
                    if (textDiv) {
                        textDiv.textContent = newText;
                    }
                    // Actualizar el onclick del botón editar
                    const editBtn = card.querySelector('.btn-edit');
                    if (editBtn) {
                        editBtn.setAttribute('onclick', `editQuestion(${id}, '${newText.replace(/'/g, "\\'")}'))`);
                    }
                }
            });
        }

        function addQuestionCard(question) {
            const grid = document.getElementById('questionsGrid');
            const card = document.createElement('div');
            card.className = 'question-card';
            card.innerHTML = `
                <div class="question-number">${question.id}</div>
                <div class="question-text">${question.text}</div>
                <div class="question-actions">
                    <button class="btn btn-edit btn-small" onclick="editQuestion(${question.id}, '${question.text.replace(/'/g, "\\'")}')">
                        <i class="fas fa-edit"></i> Editar
                    </button>
                    <button class="btn btn-delete btn-small" onclick="deleteQuestion(${question.id})">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                </div>
            `;
            grid.appendChild(card);
        }


        function saveAll() {
            // Preparar datos para enviar al servidor
            const questionsData = questions.map(q => ({
                Id: q.id,
                Texto: q.text
            }));

            // Enviar datos al servidor mediante AJAX
            fetch('/PreguntasMCHAT/ActualizarPreguntas', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(questionsData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('¡Cambios guardados exitosamente!');
                    originalQuestions = [...questions]; // Actualizar la copia
                } else {
                    alert('Error al guardar: ' + (data.message || 'Error desconocido'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al guardar los cambios. Por favor, intenta de nuevo.');
            });
        }

        // Funcionalidad de búsqueda
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const cards = document.querySelectorAll('.question-card');
            let visibleCount = 0;

            cards.forEach(card => {
                const textDiv = card.querySelector('.question-text');
                if (textDiv) {
                    const text = textDiv.textContent.toLowerCase();
                    if (text.includes(searchTerm)) {
                        card.style.display = 'block';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                }
            });

            updateStats(visibleCount);
        });

        // Cerrar modal al hacer clic fuera de él
        window.onclick = function(event) {
            const modal = document.getElementById('questionModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Inicializar estadísticas
        updateStats();
    </script>
</body>
</html>